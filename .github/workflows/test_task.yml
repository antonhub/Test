# https://help.github.com/en/actions
name: CI process for my test task
on:
  pull_request:

env:
  ES_HTTP_PORT: 9209
jobs:
  symfony:
    name: Symfony 7.1 (PHP ${{ matrix.php-versions }})
    # https://hub.docker.com/_/ubuntu/
    runs-on: ubuntu-20.04
    services:
      # https://docs.docker.com/samples/library/mysql/
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: root
#          MYSQL_DATABASE: symfony
        ports:
#          - 3306:3306
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['8.3']
    steps:
      # —— Setup Github actions 🐙 —————————————————————————————————————————————
      # https://github.com/actions/checkout (official)
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite, mysql, dom, filter, gd, iconv, json
          ini-values: opcache.enable_cli=1, post_max_size=512M, max_execution_time=180
          coverage: xdebug
          tools: phpunit-bridge, phpcs, cs2pr, php-cs-fixer, psalm, phpstan, phpunit
        env:
          update: true

      - name: Check PHP Version
        run: php -v

      # Local MySQL service in GitHub hosted environments is disabled by default.
      # If you are using it instead of service containers, make sure you start it.
      # - name: Start mysql service
      #   run: sudo systemctl start mysql.service

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader


      ## —— Coding standards ✨ ————————————————————————————————————————————————
#      - name: Run Psalm
#        run: psalm --output-format=github

      ## —— Static analysis ✨ —————————————————————————————————————————————————
#      - name: Static analysis of PHP code (PHPStan)
#        run: phpstan analyse src
#
#      - name: Run phpcs
#        run: phpcs -q --report=checkstyle src | cs2pr

      ## —— Tests ✅ ———————————————————————————————————————————————————————————
      # We use the dev env here
      - name: Load test db environment and Doctrine fixtures
        run: |
          php bin/console --env=test doctrine:database:create`
          php bin/console --env=test doctrine:schema:create
          php bin/console doctrine:migrations:migrate
          php bin/console make:fixtures
          php bin/console --env=test doctrine:fixtures:load

#      - name: Run Migration
#        run: |
#          composer require --dev symfony/orm-pack
##          php bin/console doctrine:schema:update --force || echo "No migrations found or schema update failed"
#          php bin/console doctrine:migrations:migrate || echo "No migrations found or migration failed"
#        env:
#          DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony

#      - name: Install PHPUnit
#        run: simple-phpunit install

      - name: Run tests
#        run: simple-phpunit --coverage-text
        run: php bin/phpunit tests/Unit --coverage-text